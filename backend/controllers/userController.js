// here we write logic using that we allow user to create an account or login on the website
// we are going to use this functions for routes 

import userModel from "../models/userModel.js";  // eo
import validator from "validator";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken"

const createToken = (id)=>{  // function to create Token
    return jwt.sign({id},process.env.JWT_SECRET) // syntax of token creation
}

// Route for user login
const loginUser = async(req,res)=>{
    try{
        const {email,password} = req.body;
        const user = await userModel.findOne({email});
        if(!user){
            return res.json({success:false,message:"user doesn't exists!"});
        }
        const isMatch = await bcrypt.compare(password, user.password);
        if(isMatch){    
            const token = createToken(user._id);
            res.json({success:true,token})
        }
        else{
            res.json({success:false, message:"Invalid Credentials"});
        }
    }
    catch(error){
        console.log(error);
        res.json({success:false, message:error.message})
    }
    
    
}

// Route for user registration
const registerUser = async(req,res)=>{
    try{
        const {name, email, password} = req.body;
        // checking user already exist or not
        const exists = await userModel.findOne({email});
        if(exists){
            return res.json({success:false,message:"User already exists"   })
        }

        // validate email format and strong password
        if(!validator.isEmail(email)){
            return res.json({success:false,message:"please enter a valid email"})
        }
        // check strong password
        if(password.length<8){
            return res.json({success:false,message:"please enter a strong password"})
        }

        // hash this password and store it in database - hashing user password
        const salt = await bcrypt.genSalt(10) // can give from 5 to 15 if we give larger number it takes more time to encrypt password
        const hashedpassword = await bcrypt.hash(password,salt)
        const newUser = new userModel({name,email,password:hashedpassword})
        // save this user in our dB
        const user = await newUser.save() // whenever user is created then id also generated by default - using id we generate the token, here in createToken function we return token using jwt package 
        const token = createToken(user._id);
        res.json({success:true, token})

    }catch(error)
    {   
        console.log(error);
        res.json({success:error, message:error.message})
    }
    
}

// Route for adminlogin
const adminLogin = async(req,res)=>{
    try{
        const {email,password} = req.body;
        if(email === process.env.ADMIN_EMAIL && password === process.env.ADMIN_PASSWORD){ // when both are matching then we create one token and send it to admin user 
            const token = jwt.sign(email+password, process.env.JWT_SECRET);//token creation sign used 
            res.json({success:true, token})// send this token to admin user
            // if we decode this token then we will get admin email and password 
            // to authenticate admin we will create one middleware 
        }
        else{
            res.json({success:false,message:"Invalid Credentials"})
        }
    }
    catch(error){

    }
}

export {loginUser, registerUser, adminLogin}